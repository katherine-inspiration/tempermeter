{"version":3,"sources":["StyledComponents/Header.jsx","StyledComponents/HeaderLogo.jsx","StyledComponents/FAIcon.jsx","StyledComponents/Main.jsx","StyledComponents/Button.jsx","StyledComponents/Title.jsx","StyledComponents/ResultsHistoryItem.jsx","StyledComponents/Paragraph.jsx","Components/ResultsHistory.jsx","StyledComponents/ResultsHistory.jsx","redux/reducers/results-history-reducer.js","ContainerComponents/ResultsHistoryContainer.jsx","redux/action-creators/results-history-action-creators.js","Components/Home.jsx","redux/reducers/user-info-reducer.js","redux/action-creators/user-info-action-creators.js","ContainerComponents/HomeContainer.jsx","Components/Question.jsx","Components/Test.jsx","redux/reducers/session-info-reducer.js","redux/action-creators/session-info-action-creators.js","redux/reducers/questions-reducer.js","redux/action-creators/questions-action-creators.js","ContainerComponents/TestContainer.jsx","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["Header","styled","header","HeaderLogo","img","FAIcon","FontAwesomeIcon","props","secondary","Main","section","Button","button","primary","Title","h1","ResultHistoryItem","console","log","longDate","Date","date","toLocaleTimeString","month","day","year","hour","minute","second","className","result_name","Paragraph","p","ResultsHistory","items","resultsHistory","length","map","item","key","session_id","ResultHistory","initialState","resultsHistoryReducer","state","action","type","newState","ResultsHistoryContainer","connect","dispatch","updateResultsHistory","updateResultsHistoryActionCreator","Home","as","NavLink","to","onClick","fetch","user_id","then","response","json","result","catch","err","userInfoReducer","userInfo","updateUserInfoActionCreator","HomeContainer","updateUserInfo","Question","question_text","Test","useState","setSessionId","isLastQuestion","questions","setQuestions","useEffect","updateSessionId","updateQuestions","question","question_id","questions_picture","question_picture","sessionInfoReducer","updateSessionIdActionCreator","questionsReducer","updateQuestionsActionCreator","TestContainer","sessionInfo","App","src","alt","icon","faInfoCircle","path","render","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.150e7da4.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n    background-color: white;\r\n    padding: 0px;\r\n    width: 100%;\r\n    display:block;\r\n    height: 100px;\r\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nconst HeaderLogo = styled.img`\r\n    width: 150px;\r\n    height: 150px;\r\n    position:absolute;\r\n    top: -30px;\r\n    left: 20px;\r\n`;\r\n\r\nexport default HeaderLogo;","import styled from \"styled-components\";\r\nimport { FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nconst FAIcon = styled(FontAwesomeIcon)`\r\n    font-size: 30px;\r\n    color: ${props => props.secondary? '#FD759C': '#2E753E'};\r\n    position: absolute;\r\n    top: 30px;\r\n    right: 40px;\r\n    \r\n    :hover{\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport default FAIcon;","import styled from \"styled-components\";\r\n\r\nconst Main = styled.section`\r\n    width: 1000px;\r\n    margin: 20px auto;\r\n    background-color: white;\r\n    padding: 20px;\r\n    display: block;\r\n    text-align: center;\r\n    border: 1px pink solid;\r\n`;\r\n\r\nexport default Main;","import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n    padding: 18px 60px;\r\n    background-color: ${props => props.primary? '#2E753E': props.secondary? '#FD759C': 'white'};\r\n    color: ${props => props.primary? 'white': props.secondary? 'white': '#2E753E'};\r\n    border: 1px ${props => props.secondary? '#FD759C': '#2E753E'} solid;\r\n    display: inline-block;\r\n    font-size:20px;\r\n    text-decoration: none;\r\n    :hover{\r\n        cursor:pointer;\r\n    }\r\n    :active{\r\n        box-shadow: 0 0 6px 0 rgba(0, 0, 0, 0.5);\r\n    }\r\n`;\r\n\r\nexport default Button;","import styled from \"styled-components\";\r\n\r\nconst Title = styled.h1`\r\n    color: ${props => props.secondary? '#FD759C': '#2E753E'};\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n\r\n`;\r\n\r\nexport default Title;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Item = (props) => {\r\n    console.log(props);\r\n    let options = {\r\n        month: 'long',\r\n        day: 'numeric',\r\n        year: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n    };\r\n    let date = new Date(props.date);\r\n    let longDate = date.toLocaleTimeString('ru-RU', options);\r\n\r\n    return(\r\n        <div>\r\n            <div className={props.className}>\r\n                <span className={\"date\"}>\r\n                    {longDate}\r\n                </span>\r\n                <br/>\r\n                <span className={\"result_name\"}>\r\n                    {props.result_name}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ResultHistoryItem = styled(Item)`\r\n    \r\n    border:1px ${props => props.primary? '#2E753E': '#FD759C'} solid;\r\n    padding: 20px 40px;\r\n    font-size: 17px;\r\n    border-radius: 15px;\r\n    display: inline-block;\r\n    .date{\r\n        color: '#4d4d4d';\r\n        font-style: italic;\r\n    }\r\n    .result_name{\r\n        font-weight:bold;\r\n    }\r\n    :hover{\r\n        background-color: ${props => props.primary? '#2E753E': '#FD759C'};\r\n        color: white;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst render = () => (\r\n    <ResultHistoryItem />\r\n)\r\n\r\nexport default ResultHistoryItem","import styled from \"styled-components\";\r\n\r\nconst Paragraph = styled.p`\r\n    border: 1px ${props => props.primary? '#2E753E': '#FD759C'} solid;\r\n    background-color: white;\r\n    color: '#4d4d4d';\r\n    font-size: 18px;\r\n    border-radius: 15px;\r\n    padding: 20px;\r\n    \r\n`;\r\n\r\nexport default Paragraph;","import React from \"react\";\r\nimport ResultHistoryItem from \"../StyledComponents/ResultsHistoryItem\";\r\nimport Paragraph from \"../StyledComponents/Paragraph\";\r\n\r\nconst ResultsHistory = (props) => {\r\n    let items = props.resultsHistory.length>0?\r\n        props.resultsHistory.map( item => <ResultHistoryItem {...item} key={item.session_id} /> ) :\r\n        (<Paragraph>\r\n            Ваша история пуста. Вы еще ни разу не проходили тест.\r\n        </Paragraph>)\r\n    ;\r\n    return(\r\n      <div>\r\n          {items}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default ResultsHistory;","import styled from \"styled-components\";\r\nimport ResultsHistory from \"../Components/ResultsHistory\";\r\n\r\n\r\nconst ResultHistory = styled(ResultsHistory)`\r\n`;\r\n\r\nexport default ResultHistory;","export const UPDATE_RESULTS_HISTORY = 'UPDATE-RESULTS-HISTORY';\r\n\r\nconst initialState = [\r\n];\r\n\r\nconst resultsHistoryReducer = (state = initialState, action) => {\r\n    let stateCopy = [...state];\r\n    switch(action.type){\r\n        case UPDATE_RESULTS_HISTORY:\r\n            return action.newState;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default resultsHistoryReducer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport ResultsHistory from \"../StyledComponents/ResultsHistory\";\r\nimport {updateResultsHistoryActionCreator} from \"../redux/action-creators/results-history-action-creators\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        resultsHistory: state.resultsHistory\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateResultsHistory: (newState) => {\r\n            dispatch(updateResultsHistoryActionCreator(newState));\r\n        }\r\n    };\r\n};\r\n\r\nconst ResultsHistoryContainer = connect(mapStateToProps, mapDispatchToProps)(ResultsHistory);\r\n\r\n\r\n\r\nexport default ResultsHistoryContainer;","import {UPDATE_RESULTS_HISTORY} from \"../reducers/results-history-reducer\";\r\n\r\nexport const updateResultsHistoryActionCreator = (newState) => {\r\n    return {\r\n        type: UPDATE_RESULTS_HISTORY,\r\n        newState:{\r\n            ...newState\r\n        }\r\n    }\r\n};","import React, {useState} from \"react\";\r\nimport Button from \"../StyledComponents/Button\";\r\nimport Title from \"../StyledComponents/Title\";\r\nimport ResultsHistoryContainer from \"../ContainerComponents/ResultsHistoryContainer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Home = (props) => {\r\n    const startSession = () => {\r\n        return fetch('/api/session/start/' + props.user_id)\r\n            .then(response => {\r\n                console.log(response);\r\n                return response.json()})\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const runTestHandler = () => {\r\n        startSession();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button primary as={NavLink} to={'/test/1'} onClick={runTestHandler}>\r\n                Пройти тест\r\n            </Button>\r\n            <Title secondary>\r\n                История\r\n            </Title>\r\n            <ResultsHistoryContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","export const UPDATE_USER_INFO = 'UPDATE-USER-INFO';\r\n\r\nconst initialState = {\r\n    user_id: '1'\r\n}\r\n\r\nconst userInfoReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case UPDATE_USER_INFO:\r\n            return action.userInfo;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default userInfoReducer;","import {UPDATE_USER_INFO} from \"../reducers/user-info-reducer\";\r\n\r\n\r\nconst updateUserInfoActionCreator = (userInfo) => {\r\n    return {\r\n        type: UPDATE_USER_INFO,\r\n        userInfo: {\r\n            ...userInfo\r\n        }\r\n    };\r\n};\r\n\r\nexport default updateUserInfoActionCreator;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Home from \"../Components/Home\";\r\nimport updateUserInfoActionCreator from \"../redux/action-creators/user-info-action-creators\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ...state.userInfo\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateUserInfo: (userInfo) => {\r\n            dispatch(updateUserInfoActionCreator(userInfo));\r\n        }\r\n    }\r\n};\r\n\r\nconst HomeContainer = connect(mapStateToProps, mapDispatchToProps)(Home);\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport Paragraph from \"../StyledComponents/Paragraph\";\r\n\r\nconst Question = (props) => {\r\n    return (\r\n        <Paragraph primary>\r\n            {props.question_text}\r\n        </Paragraph>\r\n    );\r\n};\r\n\r\nexport default Question;","import React, {useEffect, useState} from \"react\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Question from \"./Question\";\r\nimport Button from \"../StyledComponents/Button\";\r\n\r\nconst Test = (props) => {\r\n\r\n    let [sessionId, setSessionId] = useState(null);\r\n    let [isLastQuestion, setIsLastQuestion] = useState(false);\r\n    let [questions, setQuestions] = useState([]);\r\n    const getSessionId = () => {\r\n        console.log('/api/session/' + props.user_id);\r\n        return fetch('/api/session/' + props.user_id)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                console.log(result);\r\n                props.updateSessionId(result.session_id);\r\n                return result.session_id;\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const getQuestions = () => {\r\n        console.log('Getting questions');\r\n        return fetch('/api/questions')\r\n            .then(response => {\r\n                console.log(response);\r\n                return response.json();\r\n            })\r\n            .then(result => {\r\n                console.log('questions result');\r\n                console.log(result);\r\n                props.updateQuestions(result);\r\n                setQuestions(result);\r\n                return result;\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    useEffect(() => {\r\n        setSessionId(props.session_id);\r\n    }, [props.session_id]);\r\n\r\n\r\n    getSessionId();\r\n    getQuestions();\r\n\r\n    return (\r\n        <div>\r\n            {/*<Switch>\r\n                <Route path={'/:question_id'} render={(p) => <Question session_id = {props.session_id} question_id={p.match.params.question_id} lastQuestionHandler={setIsLastQuestion} />}/>\r\n            </Switch>*/}\r\n            {questions.map(question => <Question session_id={props.session_id} question_id={question.question_id}\r\n                                                 question_text={question.question_text}\r\n                                                 questions_picture={question.question_picture}/>)}\r\n            <Button>\r\n                Назад\r\n            </Button>\r\n            <Button primary={isLastQuestion ? true : false}>\r\n                {isLastQuestion ? 'Завершить тест' : 'Вперед'}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Test;","export const UPDATE_SESSION_ID = 'UPDATE-SESSION-ID';\r\n\r\nconst initialState = null;\r\n\r\nconst sessionInfoReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case UPDATE_SESSION_ID:\r\n            return { ...state,\r\n                session_id: action.session_id\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default sessionInfoReducer;","import {UPDATE_SESSION_ID} from \"../reducers/session-info-reducer\";\r\n\r\nconst updateSessionIdActionCreator = (session_id) => {\r\n    return {\r\n        type: UPDATE_SESSION_ID,\r\n        session_id\r\n    }\r\n};\r\n\r\nexport default updateSessionIdActionCreator;","export const UPDATE_QUESTIONS = 'UPDATE-QUESTIONS';\r\n\r\nconst questionsReducer = (state = [], action) => {\r\n    switch(action.type){\r\n        case UPDATE_QUESTIONS:\r\n            return [...action.questions];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default questionsReducer;","import {UPDATE_QUESTIONS} from \"../reducers/questions-reducer\";\r\n\r\nconst updateQuestionsActionCreator = (questions) => {\r\n    return{\r\n        type: UPDATE_QUESTIONS,\r\n        questions: [...questions]\r\n    }\r\n};\r\n\r\nexport default updateQuestionsActionCreator;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Test from \"../Components/Test\";\r\nimport updateSessionIdActionCreator from \"../redux/action-creators/session-info-action-creators\";\r\nimport updateQuestionsActionCreator from \"../redux/action-creators/questions-action-creators\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ...state.sessionInfo,\r\n        ...state.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateSessionId: (session_id) => {\r\n            dispatch(updateSessionIdActionCreator(session_id));\r\n        },\r\n        updateQuestions: (questions) => {\r\n            dispatch(updateQuestionsActionCreator(questions))\r\n        },\r\n    };\r\n};\r\n\r\nconst TestContainer = connect(mapStateToProps, mapDispatchToProps)(Test);\r\n\r\nexport default TestContainer;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Header from \"./StyledComponents/Header\";\r\nimport HeaderLogo from \"./StyledComponents/HeaderLogo\";\r\nimport FAIcon from \"./StyledComponents/FAIcon\";\r\nimport {faInfoCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Main from \"./StyledComponents/Main\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport HomeContainer from \"./ContainerComponents/HomeContainer\";\r\nimport TestContainer from \"./ContainerComponents/TestContainer\";\r\n\r\nfunction App() {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Header>\r\n                <HeaderLogo src=\"images/Tempermeter-logo.svg\" alt={\"Tempermeter logo\"}/>\r\n                <FAIcon icon = {faInfoCircle}  />\r\n            </Header>\r\n            <Main>\r\n                <Switch>\r\n                    <Route path={\"/home\"} render = {() => <HomeContainer/>} />\r\n                    <Route path={\"/test/:question_id\"} render={() => <TestContainer /> } />\r\n                </Switch>\r\n            </Main>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport resultsHistoryReducer from \"./reducers/results-history-reducer\";\r\nimport userInfoReducer from \"./reducers/user-info-reducer\";\r\nimport sessionInfoReducer from \"./reducers/session-info-reducer\";\r\nimport questionsReducer from \"./reducers/questions-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    resultsHistory: resultsHistoryReducer,\r\n    userInfo: userInfoReducer,\r\n    sessionInfo: sessionInfoReducer,\r\n    questions: questionsReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store = {store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}